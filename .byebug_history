continue
Formula.find_by_code(@data[:insert][:code])
next
Formula.find_by_code(@data[:insert][:code])
continue
formula = Formula.find_by_code(@data[:insert][:code]).to_sql
ActiveRecord::Base.connection.execute(sql)
sql
@data[:insert][:code]
formula = ::Formula.find_by_code(@data[:insert][:code]).to_sql
formula = ::Formula.find_by_code(@data[:insert][:code])
puts insert_sql
ActiveRecord::Base.connection.execute(insert_sql)
insert_sql
@data[:insert][:code]
::Formula.all
::Formula.count
continue
attributes["asset"]
attributes
continue
formula_params
continue
params
formula_params
continue
formulas_asset.asset.original_filename
formulas_asset.asset.original_file_name
formulas_asset.asset.methods - Object.methods
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
exit
formula_params
continue
formula_params
continue
formula_params
continue
f.object.formulas_assets
f.object
object
continue
value
self
continue
self
value
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
continue
formula_params
exit
[attributes[:completed], attributes[:completed_on], attributes[:comments]]
[attributes[:completed], attributes[:completed_on], attributes[:comments]].all?(&:blank?)
continue
[attributes[:completed], attributes[:completed_on], attributes[:comments]].all?(&:blank?)
attributes[:completed]
attributes
continue
formula_params
continue
formula_params
exit
formula_params
continue
@progress_step_options
continue
@progress_step_options = ProgressStep.all
continue
r.first[@step.code+'_YN']
continue
@step.code+'_Date'
r.first[@step.code+'_Date'].to_s
r.first[@step.code+'_YN']
r.first
@step
formula_progress_step.progress_step
formula_progress_step
continue
formula.formulas_progress_steps[0]
formula.formulas_progress_steps.count
formula
formula_progress_step.id
formula_progress_step.reload
formula_progress_step
formula_progress_step.update_attributes(@data[:update])
formula_progress_step.update_attributes!(@data[:update])
@data[:update]
continue
@data[:insert][:completed_on].to_time.utc
@data[:insert][:completed_on].to_time
r.first[@step.code+'_Date']
r.first[@step.code+'_Date'].class
@data[:insert][:completed_on].class
continue
formula.formulas_progress_steps.count
continue
@step
formula.formulas_progress_steps
formula.formulas_progress_steps.count
continue
org_formula.updated_at
formula.updated_at
formula.created_at
org_formula.created_at
continue
ActiveRecord::Base.connection.last_inserted_id(nil)
ActiveRecord::Base.connection.last_inserted_id
ActiveRecord::Base.connection.exec_inserted_id
ActiveRecord::Base.connection.methods - Object.methods
ActiveRecord::Base.connection.execute(insert_sql).class
continue
r = ActiveRecord::Base.connection.insert_id
r = ActiveRecord::Base.connection.last_inserted_id
r
r = ActiveRecord::Base.connection.insert_sql(insert_sql)
continue
r = ActiveRecord::Base.connection.last_id
r = ActiveRecord::Base.connection.id
::Formula.last
::Formula.count
::Formula.find(0)
Formula.find(0)
r
r = ActiveRecord::Base.connection.insert(insert_sql)
exit
r = ActiveRecord::Base.connection.raw_connection.query(insert_sql, as: :hash)
r
r = ActiveRecord::Base.connection.raw_connection.query(insert_sql, as: :hash)
continue
r = ActiveRecord::Base.connection.raw_connection.query(insert_sql, as: :hash)
r = ActiveRecord::Base.connection.raw_connection.execute(insert_sql, as: :hash)
r = ActiveRecord::Base.connection.raw_connection.insert(insert_sql, as: :hash)
::Formula.find_by_code("d995c235-7337-49eb-b057-6b448efecb67")
Formula.find_by_code("d995c235-7337-49eb-b057-6b448efecb67")
puts insert_sql
r
continue
puts sql
continue
puts sql
continue
::Formula.find_by_code!(@data[:insert][:code])
continue
set_statments
continue
formula.formulas_progress_steps.count
puts sql
formulas_progress_step
continue
methods
exit
@data[:update][:tds_msds_yn]
formulas_progress_step
continue
FormulasProgressStep.all
nil
formulas_progress_step
r
continue
::Formula.find_by_code(@data[:insert][:code])
::Formula.where(code: @data[:update][:code]).to_sql
::Formula.find_by_code(@data[:update][:code]).to_sql
puts insert_sql
puts sql
sql.to_s
sql
r
continue
destination_db
continue
whereami
@connection
destination_db
continue
formula.reload
formula = ::Formula.find_by_code(@data[:insert][:code])
r.to_a
r = ActiveRecord::Base.connection.execute("select * from chemfil1_test.new_product_progress_data")
r
r = ActiveRecord::Base.connection.execute(sql)
ActiveRecord::Base.connection.execute(sql)
continue
next
r.count
next
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_DIMACHEM").to_a
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
next
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
next
formula
next
::Formula.count
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_DIMACHEM").to_a
next
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_DIMACHEM").to_a
exit
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_DIMACHEM").to_a
eval ActiveRecord::Base.connection.execute(sql)
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
next
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
next
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
eval ActiveRecord::Base.connection.reset!
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
eval ActiveRecord::Base.connection.reset!
eval ActiveRecord::Base.connection.reset
eval ActiveRecord::Base.connection.methods
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
continue
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1").to_a
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1")
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1;")
eval ActiveRecord::Base.connection.execute("SELECT @TRIGGER_CHECKS_CHEMFIL1;").to_a
continue
r.count
next
continue
formula
r.count
r
rr
